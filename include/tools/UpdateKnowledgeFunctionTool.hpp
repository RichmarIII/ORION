#pragma once

#include "tools/FunctionTool.hpp"

namespace ORION
{
    /// @brief  A tool that can update existing knowledge
    class UpdateKnowledgeFunctionTool final : public FunctionTool
    {
    public:
        struct Statics
        {
            /// @brief A function that updates existing knowledge
            constexpr static auto UPDATE_KNOWLEDGE = R"(
            {
                "description" : "Updates existing knowledge. Confirm with user exact new information being stored. This will replace the existing knowledge, and is and amalgamation of the existing knowledge, new knowledge, and changed knowledge being stored.",
                "name" : "update_knowledge",
                "parameters" : {
                    "type" : "object",
                    "properties" : {
                        "existing_knowledge_type" : {
                            "type" : "string",
                            "enum" : [ "user_personal_info", "user_interests", "family_personal_info", "family_interests", "user_preferences", "unknown" ],
                            "description" : "Must match the existing knowledge type being updated."
                        },
                        "new_knowledge" : {
                            "type" : "string",
                            "description" : "The new knowledge to store. A summary generated by examining the current conversation and intelligently determining the knowledge"
                        },
                        "new_knowledge_subject_and_tags" : {
                            "type" : "array",
                            "items" : {
                                "type" : "string"
                            },
                            "description" : "MUST contain a list of at LEAST 10 generated TAGS that describes the content. For example, if the knowledge is about a person in a red shirt and black pants walking down the road, the tags could be 'person', 'red shirt', 'black pants', 'walking', 'road', 'outside', 'person walking', 'clothing', 'color', 'activity'."
                        },
                        "existing_knowledge_ids" : {
                            "type" : "array",
                            "items" : {
                                "type" : "string"
                            },
                            "description" : "The unique IDs of the knowledge to update. REQUIRED!!!"
                        }
                    },
                    "required" : [ "existing_knowledge_type", "new_knowledge", "new_knowledge_subject_and_tags", "existing_knowledge_ids"]
                }
            })";
        };

        inline
        UpdateKnowledgeFunctionTool()
            : FunctionTool(Statics::UPDATE_KNOWLEDGE)
        {
        }

        virtual std::string Execute(class Orion& Orion, const web::json::value& Parameters) override;
    };
} // namespace ORION
